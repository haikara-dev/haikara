// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/cubdesign/haikara/ent/site"
	"github.com/cubdesign/haikara/ent/sitecrawlrule"
)

// SiteCrawlRule is the model entity for the SiteCrawlRule schema.
type SiteCrawlRule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ArticleSelector holds the value of the "article_selector" field.
	ArticleSelector string `json:"article_selector,omitempty"`
	// TitleSelector holds the value of the "title_selector" field.
	TitleSelector string `json:"title_selector,omitempty"`
	// LinkSelector holds the value of the "link_selector" field.
	LinkSelector string `json:"link_selector,omitempty"`
	// DescriptionSelector holds the value of the "description_selector" field.
	DescriptionSelector string `json:"description_selector,omitempty"`
	// HasDataToList holds the value of the "has_data_to_list" field.
	HasDataToList bool `json:"has_data_to_list"`
	// DateSelector holds the value of the "date_selector" field.
	DateSelector string `json:"date_selector,omitempty"`
	// DateLayout holds the value of the "date_layout" field.
	DateLayout string `json:"date_layout,omitempty"`
	// IsTimeHumanize holds the value of the "is_time_humanize" field.
	IsTimeHumanize bool `json:"is_time_humanize"`
	// IsSpa holds the value of the "is_spa" field.
	IsSpa bool `json:"is_spa"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SiteCrawlRuleQuery when eager-loading is set.
	Edges                SiteCrawlRuleEdges `json:"edges"`
	site_site_crawl_rule *int
}

// SiteCrawlRuleEdges holds the relations/edges for other nodes in the graph.
type SiteCrawlRuleEdges struct {
	// Site holds the value of the site edge.
	Site *Site `json:"site,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SiteOrErr returns the Site value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SiteCrawlRuleEdges) SiteOrErr() (*Site, error) {
	if e.loadedTypes[0] {
		if e.Site == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: site.Label}
		}
		return e.Site, nil
	}
	return nil, &NotLoadedError{edge: "site"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SiteCrawlRule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sitecrawlrule.FieldHasDataToList, sitecrawlrule.FieldIsTimeHumanize, sitecrawlrule.FieldIsSpa:
			values[i] = new(sql.NullBool)
		case sitecrawlrule.FieldID:
			values[i] = new(sql.NullInt64)
		case sitecrawlrule.FieldArticleSelector, sitecrawlrule.FieldTitleSelector, sitecrawlrule.FieldLinkSelector, sitecrawlrule.FieldDescriptionSelector, sitecrawlrule.FieldDateSelector, sitecrawlrule.FieldDateLayout:
			values[i] = new(sql.NullString)
		case sitecrawlrule.FieldCreatedAt, sitecrawlrule.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case sitecrawlrule.ForeignKeys[0]: // site_site_crawl_rule
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SiteCrawlRule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SiteCrawlRule fields.
func (scr *SiteCrawlRule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sitecrawlrule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			scr.ID = int(value.Int64)
		case sitecrawlrule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				scr.CreatedAt = value.Time
			}
		case sitecrawlrule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				scr.UpdatedAt = value.Time
			}
		case sitecrawlrule.FieldArticleSelector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field article_selector", values[i])
			} else if value.Valid {
				scr.ArticleSelector = value.String
			}
		case sitecrawlrule.FieldTitleSelector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title_selector", values[i])
			} else if value.Valid {
				scr.TitleSelector = value.String
			}
		case sitecrawlrule.FieldLinkSelector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_selector", values[i])
			} else if value.Valid {
				scr.LinkSelector = value.String
			}
		case sitecrawlrule.FieldDescriptionSelector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description_selector", values[i])
			} else if value.Valid {
				scr.DescriptionSelector = value.String
			}
		case sitecrawlrule.FieldHasDataToList:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_data_to_list", values[i])
			} else if value.Valid {
				scr.HasDataToList = value.Bool
			}
		case sitecrawlrule.FieldDateSelector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date_selector", values[i])
			} else if value.Valid {
				scr.DateSelector = value.String
			}
		case sitecrawlrule.FieldDateLayout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date_layout", values[i])
			} else if value.Valid {
				scr.DateLayout = value.String
			}
		case sitecrawlrule.FieldIsTimeHumanize:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_time_humanize", values[i])
			} else if value.Valid {
				scr.IsTimeHumanize = value.Bool
			}
		case sitecrawlrule.FieldIsSpa:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_spa", values[i])
			} else if value.Valid {
				scr.IsSpa = value.Bool
			}
		case sitecrawlrule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field site_site_crawl_rule", value)
			} else if value.Valid {
				scr.site_site_crawl_rule = new(int)
				*scr.site_site_crawl_rule = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySite queries the "site" edge of the SiteCrawlRule entity.
func (scr *SiteCrawlRule) QuerySite() *SiteQuery {
	return (&SiteCrawlRuleClient{config: scr.config}).QuerySite(scr)
}

// Update returns a builder for updating this SiteCrawlRule.
// Note that you need to call SiteCrawlRule.Unwrap() before calling this method if this SiteCrawlRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (scr *SiteCrawlRule) Update() *SiteCrawlRuleUpdateOne {
	return (&SiteCrawlRuleClient{config: scr.config}).UpdateOne(scr)
}

// Unwrap unwraps the SiteCrawlRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (scr *SiteCrawlRule) Unwrap() *SiteCrawlRule {
	_tx, ok := scr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SiteCrawlRule is not a transactional entity")
	}
	scr.config.driver = _tx.drv
	return scr
}

// String implements the fmt.Stringer.
func (scr *SiteCrawlRule) String() string {
	var builder strings.Builder
	builder.WriteString("SiteCrawlRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", scr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(scr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(scr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("article_selector=")
	builder.WriteString(scr.ArticleSelector)
	builder.WriteString(", ")
	builder.WriteString("title_selector=")
	builder.WriteString(scr.TitleSelector)
	builder.WriteString(", ")
	builder.WriteString("link_selector=")
	builder.WriteString(scr.LinkSelector)
	builder.WriteString(", ")
	builder.WriteString("description_selector=")
	builder.WriteString(scr.DescriptionSelector)
	builder.WriteString(", ")
	builder.WriteString("has_data_to_list=")
	builder.WriteString(fmt.Sprintf("%v", scr.HasDataToList))
	builder.WriteString(", ")
	builder.WriteString("date_selector=")
	builder.WriteString(scr.DateSelector)
	builder.WriteString(", ")
	builder.WriteString("date_layout=")
	builder.WriteString(scr.DateLayout)
	builder.WriteString(", ")
	builder.WriteString("is_time_humanize=")
	builder.WriteString(fmt.Sprintf("%v", scr.IsTimeHumanize))
	builder.WriteString(", ")
	builder.WriteString("is_spa=")
	builder.WriteString(fmt.Sprintf("%v", scr.IsSpa))
	builder.WriteByte(')')
	return builder.String()
}

// SiteCrawlRules is a parsable slice of SiteCrawlRule.
type SiteCrawlRules []*SiteCrawlRule

func (scr SiteCrawlRules) config(cfg config) {
	for _i := range scr {
		scr[_i].config = cfg
	}
}
