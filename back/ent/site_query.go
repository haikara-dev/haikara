// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/haikara-dev/haikara/ent/article"
	"github.com/haikara-dev/haikara/ent/feed"
	"github.com/haikara-dev/haikara/ent/predicate"
	"github.com/haikara-dev/haikara/ent/site"
	"github.com/haikara-dev/haikara/ent/sitecategory"
	"github.com/haikara-dev/haikara/ent/sitecrawlrule"
)

// SiteQuery is the builder for querying Site entities.
type SiteQuery struct {
	config
	limit              *int
	offset             *int
	unique             *bool
	order              []OrderFunc
	fields             []string
	predicates         []predicate.Site
	withArticles       *ArticleQuery
	withFeeds          *FeedQuery
	withSiteCrawlRule  *SiteCrawlRuleQuery
	withSiteCategories *SiteCategoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SiteQuery builder.
func (sq *SiteQuery) Where(ps ...predicate.Site) *SiteQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit adds a limit step to the query.
func (sq *SiteQuery) Limit(limit int) *SiteQuery {
	sq.limit = &limit
	return sq
}

// Offset adds an offset step to the query.
func (sq *SiteQuery) Offset(offset int) *SiteQuery {
	sq.offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *SiteQuery) Unique(unique bool) *SiteQuery {
	sq.unique = &unique
	return sq
}

// Order adds an order step to the query.
func (sq *SiteQuery) Order(o ...OrderFunc) *SiteQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryArticles chains the current query on the "articles" edge.
func (sq *SiteQuery) QueryArticles() *ArticleQuery {
	query := &ArticleQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(site.Table, site.FieldID, selector),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, site.ArticlesTable, site.ArticlesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeeds chains the current query on the "feeds" edge.
func (sq *SiteQuery) QueryFeeds() *FeedQuery {
	query := &FeedQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(site.Table, site.FieldID, selector),
			sqlgraph.To(feed.Table, feed.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, site.FeedsTable, site.FeedsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySiteCrawlRule chains the current query on the "site_crawl_rule" edge.
func (sq *SiteQuery) QuerySiteCrawlRule() *SiteCrawlRuleQuery {
	query := &SiteCrawlRuleQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(site.Table, site.FieldID, selector),
			sqlgraph.To(sitecrawlrule.Table, sitecrawlrule.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, site.SiteCrawlRuleTable, site.SiteCrawlRuleColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySiteCategories chains the current query on the "site_categories" edge.
func (sq *SiteQuery) QuerySiteCategories() *SiteCategoryQuery {
	query := &SiteCategoryQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(site.Table, site.FieldID, selector),
			sqlgraph.To(sitecategory.Table, sitecategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, site.SiteCategoriesTable, site.SiteCategoriesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Site entity from the query.
// Returns a *NotFoundError when no Site was found.
func (sq *SiteQuery) First(ctx context.Context) (*Site, error) {
	nodes, err := sq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{site.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *SiteQuery) FirstX(ctx context.Context) *Site {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Site ID from the query.
// Returns a *NotFoundError when no Site ID was found.
func (sq *SiteQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{site.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *SiteQuery) FirstIDX(ctx context.Context) int {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Site entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Site entity is found.
// Returns a *NotFoundError when no Site entities are found.
func (sq *SiteQuery) Only(ctx context.Context) (*Site, error) {
	nodes, err := sq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{site.Label}
	default:
		return nil, &NotSingularError{site.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *SiteQuery) OnlyX(ctx context.Context) *Site {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Site ID in the query.
// Returns a *NotSingularError when more than one Site ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *SiteQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{site.Label}
	default:
		err = &NotSingularError{site.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *SiteQuery) OnlyIDX(ctx context.Context) int {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Sites.
func (sq *SiteQuery) All(ctx context.Context) ([]*Site, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sq *SiteQuery) AllX(ctx context.Context) []*Site {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Site IDs.
func (sq *SiteQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := sq.Select(site.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *SiteQuery) IDsX(ctx context.Context) []int {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *SiteQuery) Count(ctx context.Context) (int, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sq *SiteQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *SiteQuery) Exist(ctx context.Context) (bool, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *SiteQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SiteQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *SiteQuery) Clone() *SiteQuery {
	if sq == nil {
		return nil
	}
	return &SiteQuery{
		config:             sq.config,
		limit:              sq.limit,
		offset:             sq.offset,
		order:              append([]OrderFunc{}, sq.order...),
		predicates:         append([]predicate.Site{}, sq.predicates...),
		withArticles:       sq.withArticles.Clone(),
		withFeeds:          sq.withFeeds.Clone(),
		withSiteCrawlRule:  sq.withSiteCrawlRule.Clone(),
		withSiteCategories: sq.withSiteCategories.Clone(),
		// clone intermediate query.
		sql:    sq.sql.Clone(),
		path:   sq.path,
		unique: sq.unique,
	}
}

// WithArticles tells the query-builder to eager-load the nodes that are connected to
// the "articles" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SiteQuery) WithArticles(opts ...func(*ArticleQuery)) *SiteQuery {
	query := &ArticleQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withArticles = query
	return sq
}

// WithFeeds tells the query-builder to eager-load the nodes that are connected to
// the "feeds" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SiteQuery) WithFeeds(opts ...func(*FeedQuery)) *SiteQuery {
	query := &FeedQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withFeeds = query
	return sq
}

// WithSiteCrawlRule tells the query-builder to eager-load the nodes that are connected to
// the "site_crawl_rule" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SiteQuery) WithSiteCrawlRule(opts ...func(*SiteCrawlRuleQuery)) *SiteQuery {
	query := &SiteCrawlRuleQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withSiteCrawlRule = query
	return sq
}

// WithSiteCategories tells the query-builder to eager-load the nodes that are connected to
// the "site_categories" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SiteQuery) WithSiteCategories(opts ...func(*SiteCategoryQuery)) *SiteQuery {
	query := &SiteCategoryQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withSiteCategories = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Site.Query().
//		GroupBy(site.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *SiteQuery) GroupBy(field string, fields ...string) *SiteGroupBy {
	grbuild := &SiteGroupBy{config: sq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sq.sqlQuery(ctx), nil
	}
	grbuild.label = site.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Site.Query().
//		Select(site.FieldCreatedAt).
//		Scan(ctx, &v)
func (sq *SiteQuery) Select(fields ...string) *SiteSelect {
	sq.fields = append(sq.fields, fields...)
	selbuild := &SiteSelect{SiteQuery: sq}
	selbuild.label = site.Label
	selbuild.flds, selbuild.scan = &sq.fields, selbuild.Scan
	return selbuild
}

func (sq *SiteQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sq.fields {
		if !site.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *SiteQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Site, error) {
	var (
		nodes       = []*Site{}
		_spec       = sq.querySpec()
		loadedTypes = [4]bool{
			sq.withArticles != nil,
			sq.withFeeds != nil,
			sq.withSiteCrawlRule != nil,
			sq.withSiteCategories != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*Site).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &Site{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withArticles; query != nil {
		if err := sq.loadArticles(ctx, query, nodes,
			func(n *Site) { n.Edges.Articles = []*Article{} },
			func(n *Site, e *Article) { n.Edges.Articles = append(n.Edges.Articles, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withFeeds; query != nil {
		if err := sq.loadFeeds(ctx, query, nodes,
			func(n *Site) { n.Edges.Feeds = []*Feed{} },
			func(n *Site, e *Feed) { n.Edges.Feeds = append(n.Edges.Feeds, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withSiteCrawlRule; query != nil {
		if err := sq.loadSiteCrawlRule(ctx, query, nodes, nil,
			func(n *Site, e *SiteCrawlRule) { n.Edges.SiteCrawlRule = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withSiteCategories; query != nil {
		if err := sq.loadSiteCategories(ctx, query, nodes,
			func(n *Site) { n.Edges.SiteCategories = []*SiteCategory{} },
			func(n *Site, e *SiteCategory) { n.Edges.SiteCategories = append(n.Edges.SiteCategories, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *SiteQuery) loadArticles(ctx context.Context, query *ArticleQuery, nodes []*Site, init func(*Site), assign func(*Site, *Article)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Site)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Article(func(s *sql.Selector) {
		s.Where(sql.InValues(site.ArticlesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.site_articles
		if fk == nil {
			return fmt.Errorf(`foreign-key "site_articles" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "site_articles" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SiteQuery) loadFeeds(ctx context.Context, query *FeedQuery, nodes []*Site, init func(*Site), assign func(*Site, *Feed)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Site)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.InValues(site.FeedsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.site_feeds
		if fk == nil {
			return fmt.Errorf(`foreign-key "site_feeds" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "site_feeds" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SiteQuery) loadSiteCrawlRule(ctx context.Context, query *SiteCrawlRuleQuery, nodes []*Site, init func(*Site), assign func(*Site, *SiteCrawlRule)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Site)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.InValues(site.SiteCrawlRuleColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.site_site_crawl_rule
		if fk == nil {
			return fmt.Errorf(`foreign-key "site_site_crawl_rule" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "site_site_crawl_rule" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SiteQuery) loadSiteCategories(ctx context.Context, query *SiteCategoryQuery, nodes []*Site, init func(*Site), assign func(*Site, *SiteCategory)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Site)
	nids := make(map[int]map[*Site]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(site.SiteCategoriesTable)
		s.Join(joinT).On(s.C(sitecategory.FieldID), joinT.C(site.SiteCategoriesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(site.SiteCategoriesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(site.SiteCategoriesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Site]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "site_categories" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (sq *SiteQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Columns = sq.fields
	if len(sq.fields) > 0 {
		_spec.Unique = sq.unique != nil && *sq.unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *SiteQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (sq *SiteQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   site.Table,
			Columns: site.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: site.FieldID,
			},
		},
		From:   sq.sql,
		Unique: true,
	}
	if unique := sq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, site.FieldID)
		for i := range fields {
			if fields[i] != site.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *SiteQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(site.Table)
	columns := sq.fields
	if len(columns) == 0 {
		columns = site.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.unique != nil && *sq.unique {
		selector.Distinct()
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SiteGroupBy is the group-by builder for Site entities.
type SiteGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *SiteGroupBy) Aggregate(fns ...AggregateFunc) *SiteGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sgb *SiteGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sgb.path(ctx)
	if err != nil {
		return err
	}
	sgb.sql = query
	return sgb.sqlScan(ctx, v)
}

func (sgb *SiteGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sgb.fields {
		if !site.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sgb *SiteGroupBy) sqlQuery() *sql.Selector {
	selector := sgb.sql.Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sgb.fields)+len(sgb.fns))
		for _, f := range sgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sgb.fields...)...)
}

// SiteSelect is the builder for selecting fields of Site entities.
type SiteSelect struct {
	*SiteQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ss *SiteSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	ss.sql = ss.SiteQuery.sqlQuery(ctx)
	return ss.sqlScan(ctx, v)
}

func (ss *SiteSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ss.sql.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
