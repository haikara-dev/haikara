// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cubdesign/dailyfj/ent/predicate"
	"github.com/cubdesign/dailyfj/ent/site"
	"github.com/cubdesign/dailyfj/ent/sitecategory"
)

// SiteCategoryQuery is the builder for querying SiteCategory entities.
type SiteCategoryQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SiteCategory
	withSites  *SiteQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SiteCategoryQuery builder.
func (scq *SiteCategoryQuery) Where(ps ...predicate.SiteCategory) *SiteCategoryQuery {
	scq.predicates = append(scq.predicates, ps...)
	return scq
}

// Limit adds a limit step to the query.
func (scq *SiteCategoryQuery) Limit(limit int) *SiteCategoryQuery {
	scq.limit = &limit
	return scq
}

// Offset adds an offset step to the query.
func (scq *SiteCategoryQuery) Offset(offset int) *SiteCategoryQuery {
	scq.offset = &offset
	return scq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (scq *SiteCategoryQuery) Unique(unique bool) *SiteCategoryQuery {
	scq.unique = &unique
	return scq
}

// Order adds an order step to the query.
func (scq *SiteCategoryQuery) Order(o ...OrderFunc) *SiteCategoryQuery {
	scq.order = append(scq.order, o...)
	return scq
}

// QuerySites chains the current query on the "sites" edge.
func (scq *SiteCategoryQuery) QuerySites() *SiteQuery {
	query := &SiteQuery{config: scq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := scq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := scq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sitecategory.Table, sitecategory.FieldID, selector),
			sqlgraph.To(site.Table, site.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, sitecategory.SitesTable, sitecategory.SitesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(scq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SiteCategory entity from the query.
// Returns a *NotFoundError when no SiteCategory was found.
func (scq *SiteCategoryQuery) First(ctx context.Context) (*SiteCategory, error) {
	nodes, err := scq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sitecategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (scq *SiteCategoryQuery) FirstX(ctx context.Context) *SiteCategory {
	node, err := scq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SiteCategory ID from the query.
// Returns a *NotFoundError when no SiteCategory ID was found.
func (scq *SiteCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = scq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sitecategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (scq *SiteCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := scq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SiteCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SiteCategory entity is found.
// Returns a *NotFoundError when no SiteCategory entities are found.
func (scq *SiteCategoryQuery) Only(ctx context.Context) (*SiteCategory, error) {
	nodes, err := scq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sitecategory.Label}
	default:
		return nil, &NotSingularError{sitecategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (scq *SiteCategoryQuery) OnlyX(ctx context.Context) *SiteCategory {
	node, err := scq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SiteCategory ID in the query.
// Returns a *NotSingularError when more than one SiteCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (scq *SiteCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = scq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sitecategory.Label}
	default:
		err = &NotSingularError{sitecategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (scq *SiteCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := scq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SiteCategories.
func (scq *SiteCategoryQuery) All(ctx context.Context) ([]*SiteCategory, error) {
	if err := scq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return scq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (scq *SiteCategoryQuery) AllX(ctx context.Context) []*SiteCategory {
	nodes, err := scq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SiteCategory IDs.
func (scq *SiteCategoryQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := scq.Select(sitecategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (scq *SiteCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := scq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (scq *SiteCategoryQuery) Count(ctx context.Context) (int, error) {
	if err := scq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return scq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (scq *SiteCategoryQuery) CountX(ctx context.Context) int {
	count, err := scq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (scq *SiteCategoryQuery) Exist(ctx context.Context) (bool, error) {
	if err := scq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return scq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (scq *SiteCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := scq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SiteCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (scq *SiteCategoryQuery) Clone() *SiteCategoryQuery {
	if scq == nil {
		return nil
	}
	return &SiteCategoryQuery{
		config:     scq.config,
		limit:      scq.limit,
		offset:     scq.offset,
		order:      append([]OrderFunc{}, scq.order...),
		predicates: append([]predicate.SiteCategory{}, scq.predicates...),
		withSites:  scq.withSites.Clone(),
		// clone intermediate query.
		sql:    scq.sql.Clone(),
		path:   scq.path,
		unique: scq.unique,
	}
}

// WithSites tells the query-builder to eager-load the nodes that are connected to
// the "sites" edge. The optional arguments are used to configure the query builder of the edge.
func (scq *SiteCategoryQuery) WithSites(opts ...func(*SiteQuery)) *SiteCategoryQuery {
	query := &SiteQuery{config: scq.config}
	for _, opt := range opts {
		opt(query)
	}
	scq.withSites = query
	return scq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SiteCategory.Query().
//		GroupBy(sitecategory.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (scq *SiteCategoryQuery) GroupBy(field string, fields ...string) *SiteCategoryGroupBy {
	grbuild := &SiteCategoryGroupBy{config: scq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := scq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return scq.sqlQuery(ctx), nil
	}
	grbuild.label = sitecategory.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.SiteCategory.Query().
//		Select(sitecategory.FieldCreatedAt).
//		Scan(ctx, &v)
func (scq *SiteCategoryQuery) Select(fields ...string) *SiteCategorySelect {
	scq.fields = append(scq.fields, fields...)
	selbuild := &SiteCategorySelect{SiteCategoryQuery: scq}
	selbuild.label = sitecategory.Label
	selbuild.flds, selbuild.scan = &scq.fields, selbuild.Scan
	return selbuild
}

func (scq *SiteCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range scq.fields {
		if !sitecategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if scq.path != nil {
		prev, err := scq.path(ctx)
		if err != nil {
			return err
		}
		scq.sql = prev
	}
	return nil
}

func (scq *SiteCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SiteCategory, error) {
	var (
		nodes       = []*SiteCategory{}
		_spec       = scq.querySpec()
		loadedTypes = [1]bool{
			scq.withSites != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*SiteCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &SiteCategory{config: scq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, scq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := scq.withSites; query != nil {
		if err := scq.loadSites(ctx, query, nodes,
			func(n *SiteCategory) { n.Edges.Sites = []*Site{} },
			func(n *SiteCategory, e *Site) { n.Edges.Sites = append(n.Edges.Sites, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (scq *SiteCategoryQuery) loadSites(ctx context.Context, query *SiteQuery, nodes []*SiteCategory, init func(*SiteCategory), assign func(*SiteCategory, *Site)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*SiteCategory)
	nids := make(map[int]map[*SiteCategory]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(sitecategory.SitesTable)
		s.Join(joinT).On(s.C(site.FieldID), joinT.C(sitecategory.SitesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(sitecategory.SitesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(sitecategory.SitesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*SiteCategory]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "sites" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (scq *SiteCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := scq.querySpec()
	_spec.Node.Columns = scq.fields
	if len(scq.fields) > 0 {
		_spec.Unique = scq.unique != nil && *scq.unique
	}
	return sqlgraph.CountNodes(ctx, scq.driver, _spec)
}

func (scq *SiteCategoryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := scq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (scq *SiteCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sitecategory.Table,
			Columns: sitecategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sitecategory.FieldID,
			},
		},
		From:   scq.sql,
		Unique: true,
	}
	if unique := scq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := scq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sitecategory.FieldID)
		for i := range fields {
			if fields[i] != sitecategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := scq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := scq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := scq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := scq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (scq *SiteCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(scq.driver.Dialect())
	t1 := builder.Table(sitecategory.Table)
	columns := scq.fields
	if len(columns) == 0 {
		columns = sitecategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if scq.sql != nil {
		selector = scq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if scq.unique != nil && *scq.unique {
		selector.Distinct()
	}
	for _, p := range scq.predicates {
		p(selector)
	}
	for _, p := range scq.order {
		p(selector)
	}
	if offset := scq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := scq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SiteCategoryGroupBy is the group-by builder for SiteCategory entities.
type SiteCategoryGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (scgb *SiteCategoryGroupBy) Aggregate(fns ...AggregateFunc) *SiteCategoryGroupBy {
	scgb.fns = append(scgb.fns, fns...)
	return scgb
}

// Scan applies the group-by query and scans the result into the given value.
func (scgb *SiteCategoryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := scgb.path(ctx)
	if err != nil {
		return err
	}
	scgb.sql = query
	return scgb.sqlScan(ctx, v)
}

func (scgb *SiteCategoryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range scgb.fields {
		if !sitecategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := scgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (scgb *SiteCategoryGroupBy) sqlQuery() *sql.Selector {
	selector := scgb.sql.Select()
	aggregation := make([]string, 0, len(scgb.fns))
	for _, fn := range scgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(scgb.fields)+len(scgb.fns))
		for _, f := range scgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(scgb.fields...)...)
}

// SiteCategorySelect is the builder for selecting fields of SiteCategory entities.
type SiteCategorySelect struct {
	*SiteCategoryQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (scs *SiteCategorySelect) Scan(ctx context.Context, v interface{}) error {
	if err := scs.prepareQuery(ctx); err != nil {
		return err
	}
	scs.sql = scs.SiteCategoryQuery.sqlQuery(ctx)
	return scs.sqlScan(ctx, v)
}

func (scs *SiteCategorySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := scs.sql.Query()
	if err := scs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
