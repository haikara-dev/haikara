// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cubdesign/haikara/ent/predicate"
	"github.com/cubdesign/haikara/ent/site"
	"github.com/cubdesign/haikara/ent/sitecrawlrule"
)

// SiteCrawlRuleUpdate is the builder for updating SiteCrawlRule entities.
type SiteCrawlRuleUpdate struct {
	config
	hooks    []Hook
	mutation *SiteCrawlRuleMutation
}

// Where appends a list predicates to the SiteCrawlRuleUpdate builder.
func (scru *SiteCrawlRuleUpdate) Where(ps ...predicate.SiteCrawlRule) *SiteCrawlRuleUpdate {
	scru.mutation.Where(ps...)
	return scru
}

// SetUpdatedAt sets the "updated_at" field.
func (scru *SiteCrawlRuleUpdate) SetUpdatedAt(t time.Time) *SiteCrawlRuleUpdate {
	scru.mutation.SetUpdatedAt(t)
	return scru
}

// SetArticleSelector sets the "article_selector" field.
func (scru *SiteCrawlRuleUpdate) SetArticleSelector(s string) *SiteCrawlRuleUpdate {
	scru.mutation.SetArticleSelector(s)
	return scru
}

// SetTitleSelector sets the "title_selector" field.
func (scru *SiteCrawlRuleUpdate) SetTitleSelector(s string) *SiteCrawlRuleUpdate {
	scru.mutation.SetTitleSelector(s)
	return scru
}

// SetLinkSelector sets the "link_selector" field.
func (scru *SiteCrawlRuleUpdate) SetLinkSelector(s string) *SiteCrawlRuleUpdate {
	scru.mutation.SetLinkSelector(s)
	return scru
}

// SetDescriptionSelector sets the "description_selector" field.
func (scru *SiteCrawlRuleUpdate) SetDescriptionSelector(s string) *SiteCrawlRuleUpdate {
	scru.mutation.SetDescriptionSelector(s)
	return scru
}

// SetHasDataToList sets the "has_data_to_list" field.
func (scru *SiteCrawlRuleUpdate) SetHasDataToList(b bool) *SiteCrawlRuleUpdate {
	scru.mutation.SetHasDataToList(b)
	return scru
}

// SetNillableHasDataToList sets the "has_data_to_list" field if the given value is not nil.
func (scru *SiteCrawlRuleUpdate) SetNillableHasDataToList(b *bool) *SiteCrawlRuleUpdate {
	if b != nil {
		scru.SetHasDataToList(*b)
	}
	return scru
}

// SetDateSelector sets the "date_selector" field.
func (scru *SiteCrawlRuleUpdate) SetDateSelector(s string) *SiteCrawlRuleUpdate {
	scru.mutation.SetDateSelector(s)
	return scru
}

// SetDateLayout sets the "date_layout" field.
func (scru *SiteCrawlRuleUpdate) SetDateLayout(s string) *SiteCrawlRuleUpdate {
	scru.mutation.SetDateLayout(s)
	return scru
}

// SetIsTimeHumanize sets the "is_time_humanize" field.
func (scru *SiteCrawlRuleUpdate) SetIsTimeHumanize(b bool) *SiteCrawlRuleUpdate {
	scru.mutation.SetIsTimeHumanize(b)
	return scru
}

// SetNillableIsTimeHumanize sets the "is_time_humanize" field if the given value is not nil.
func (scru *SiteCrawlRuleUpdate) SetNillableIsTimeHumanize(b *bool) *SiteCrawlRuleUpdate {
	if b != nil {
		scru.SetIsTimeHumanize(*b)
	}
	return scru
}

// SetIsSpa sets the "is_spa" field.
func (scru *SiteCrawlRuleUpdate) SetIsSpa(b bool) *SiteCrawlRuleUpdate {
	scru.mutation.SetIsSpa(b)
	return scru
}

// SetNillableIsSpa sets the "is_spa" field if the given value is not nil.
func (scru *SiteCrawlRuleUpdate) SetNillableIsSpa(b *bool) *SiteCrawlRuleUpdate {
	if b != nil {
		scru.SetIsSpa(*b)
	}
	return scru
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (scru *SiteCrawlRuleUpdate) SetSiteID(id int) *SiteCrawlRuleUpdate {
	scru.mutation.SetSiteID(id)
	return scru
}

// SetSite sets the "site" edge to the Site entity.
func (scru *SiteCrawlRuleUpdate) SetSite(s *Site) *SiteCrawlRuleUpdate {
	return scru.SetSiteID(s.ID)
}

// Mutation returns the SiteCrawlRuleMutation object of the builder.
func (scru *SiteCrawlRuleUpdate) Mutation() *SiteCrawlRuleMutation {
	return scru.mutation
}

// ClearSite clears the "site" edge to the Site entity.
func (scru *SiteCrawlRuleUpdate) ClearSite() *SiteCrawlRuleUpdate {
	scru.mutation.ClearSite()
	return scru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scru *SiteCrawlRuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	scru.defaults()
	if len(scru.hooks) == 0 {
		if err = scru.check(); err != nil {
			return 0, err
		}
		affected, err = scru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SiteCrawlRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scru.check(); err != nil {
				return 0, err
			}
			scru.mutation = mutation
			affected, err = scru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(scru.hooks) - 1; i >= 0; i-- {
			if scru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (scru *SiteCrawlRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := scru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scru *SiteCrawlRuleUpdate) Exec(ctx context.Context) error {
	_, err := scru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scru *SiteCrawlRuleUpdate) ExecX(ctx context.Context) {
	if err := scru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scru *SiteCrawlRuleUpdate) defaults() {
	if _, ok := scru.mutation.UpdatedAt(); !ok {
		v := sitecrawlrule.UpdateDefaultUpdatedAt()
		scru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scru *SiteCrawlRuleUpdate) check() error {
	if _, ok := scru.mutation.SiteID(); scru.mutation.SiteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SiteCrawlRule.site"`)
	}
	return nil
}

func (scru *SiteCrawlRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sitecrawlrule.Table,
			Columns: sitecrawlrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sitecrawlrule.FieldID,
			},
		},
	}
	if ps := scru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sitecrawlrule.FieldUpdatedAt,
		})
	}
	if value, ok := scru.mutation.ArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldArticleSelector,
		})
	}
	if value, ok := scru.mutation.TitleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldTitleSelector,
		})
	}
	if value, ok := scru.mutation.LinkSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldLinkSelector,
		})
	}
	if value, ok := scru.mutation.DescriptionSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldDescriptionSelector,
		})
	}
	if value, ok := scru.mutation.HasDataToList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sitecrawlrule.FieldHasDataToList,
		})
	}
	if value, ok := scru.mutation.DateSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldDateSelector,
		})
	}
	if value, ok := scru.mutation.DateLayout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldDateLayout,
		})
	}
	if value, ok := scru.mutation.IsTimeHumanize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sitecrawlrule.FieldIsTimeHumanize,
		})
	}
	if value, ok := scru.mutation.IsSpa(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sitecrawlrule.FieldIsSpa,
		})
	}
	if scru.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sitecrawlrule.SiteTable,
			Columns: []string{sitecrawlrule.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scru.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sitecrawlrule.SiteTable,
			Columns: []string{sitecrawlrule.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitecrawlrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SiteCrawlRuleUpdateOne is the builder for updating a single SiteCrawlRule entity.
type SiteCrawlRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteCrawlRuleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (scruo *SiteCrawlRuleUpdateOne) SetUpdatedAt(t time.Time) *SiteCrawlRuleUpdateOne {
	scruo.mutation.SetUpdatedAt(t)
	return scruo
}

// SetArticleSelector sets the "article_selector" field.
func (scruo *SiteCrawlRuleUpdateOne) SetArticleSelector(s string) *SiteCrawlRuleUpdateOne {
	scruo.mutation.SetArticleSelector(s)
	return scruo
}

// SetTitleSelector sets the "title_selector" field.
func (scruo *SiteCrawlRuleUpdateOne) SetTitleSelector(s string) *SiteCrawlRuleUpdateOne {
	scruo.mutation.SetTitleSelector(s)
	return scruo
}

// SetLinkSelector sets the "link_selector" field.
func (scruo *SiteCrawlRuleUpdateOne) SetLinkSelector(s string) *SiteCrawlRuleUpdateOne {
	scruo.mutation.SetLinkSelector(s)
	return scruo
}

// SetDescriptionSelector sets the "description_selector" field.
func (scruo *SiteCrawlRuleUpdateOne) SetDescriptionSelector(s string) *SiteCrawlRuleUpdateOne {
	scruo.mutation.SetDescriptionSelector(s)
	return scruo
}

// SetHasDataToList sets the "has_data_to_list" field.
func (scruo *SiteCrawlRuleUpdateOne) SetHasDataToList(b bool) *SiteCrawlRuleUpdateOne {
	scruo.mutation.SetHasDataToList(b)
	return scruo
}

// SetNillableHasDataToList sets the "has_data_to_list" field if the given value is not nil.
func (scruo *SiteCrawlRuleUpdateOne) SetNillableHasDataToList(b *bool) *SiteCrawlRuleUpdateOne {
	if b != nil {
		scruo.SetHasDataToList(*b)
	}
	return scruo
}

// SetDateSelector sets the "date_selector" field.
func (scruo *SiteCrawlRuleUpdateOne) SetDateSelector(s string) *SiteCrawlRuleUpdateOne {
	scruo.mutation.SetDateSelector(s)
	return scruo
}

// SetDateLayout sets the "date_layout" field.
func (scruo *SiteCrawlRuleUpdateOne) SetDateLayout(s string) *SiteCrawlRuleUpdateOne {
	scruo.mutation.SetDateLayout(s)
	return scruo
}

// SetIsTimeHumanize sets the "is_time_humanize" field.
func (scruo *SiteCrawlRuleUpdateOne) SetIsTimeHumanize(b bool) *SiteCrawlRuleUpdateOne {
	scruo.mutation.SetIsTimeHumanize(b)
	return scruo
}

// SetNillableIsTimeHumanize sets the "is_time_humanize" field if the given value is not nil.
func (scruo *SiteCrawlRuleUpdateOne) SetNillableIsTimeHumanize(b *bool) *SiteCrawlRuleUpdateOne {
	if b != nil {
		scruo.SetIsTimeHumanize(*b)
	}
	return scruo
}

// SetIsSpa sets the "is_spa" field.
func (scruo *SiteCrawlRuleUpdateOne) SetIsSpa(b bool) *SiteCrawlRuleUpdateOne {
	scruo.mutation.SetIsSpa(b)
	return scruo
}

// SetNillableIsSpa sets the "is_spa" field if the given value is not nil.
func (scruo *SiteCrawlRuleUpdateOne) SetNillableIsSpa(b *bool) *SiteCrawlRuleUpdateOne {
	if b != nil {
		scruo.SetIsSpa(*b)
	}
	return scruo
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (scruo *SiteCrawlRuleUpdateOne) SetSiteID(id int) *SiteCrawlRuleUpdateOne {
	scruo.mutation.SetSiteID(id)
	return scruo
}

// SetSite sets the "site" edge to the Site entity.
func (scruo *SiteCrawlRuleUpdateOne) SetSite(s *Site) *SiteCrawlRuleUpdateOne {
	return scruo.SetSiteID(s.ID)
}

// Mutation returns the SiteCrawlRuleMutation object of the builder.
func (scruo *SiteCrawlRuleUpdateOne) Mutation() *SiteCrawlRuleMutation {
	return scruo.mutation
}

// ClearSite clears the "site" edge to the Site entity.
func (scruo *SiteCrawlRuleUpdateOne) ClearSite() *SiteCrawlRuleUpdateOne {
	scruo.mutation.ClearSite()
	return scruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scruo *SiteCrawlRuleUpdateOne) Select(field string, fields ...string) *SiteCrawlRuleUpdateOne {
	scruo.fields = append([]string{field}, fields...)
	return scruo
}

// Save executes the query and returns the updated SiteCrawlRule entity.
func (scruo *SiteCrawlRuleUpdateOne) Save(ctx context.Context) (*SiteCrawlRule, error) {
	var (
		err  error
		node *SiteCrawlRule
	)
	scruo.defaults()
	if len(scruo.hooks) == 0 {
		if err = scruo.check(); err != nil {
			return nil, err
		}
		node, err = scruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SiteCrawlRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scruo.check(); err != nil {
				return nil, err
			}
			scruo.mutation = mutation
			node, err = scruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scruo.hooks) - 1; i >= 0; i-- {
			if scruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, scruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SiteCrawlRule)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SiteCrawlRuleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (scruo *SiteCrawlRuleUpdateOne) SaveX(ctx context.Context) *SiteCrawlRule {
	node, err := scruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scruo *SiteCrawlRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := scruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scruo *SiteCrawlRuleUpdateOne) ExecX(ctx context.Context) {
	if err := scruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scruo *SiteCrawlRuleUpdateOne) defaults() {
	if _, ok := scruo.mutation.UpdatedAt(); !ok {
		v := sitecrawlrule.UpdateDefaultUpdatedAt()
		scruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scruo *SiteCrawlRuleUpdateOne) check() error {
	if _, ok := scruo.mutation.SiteID(); scruo.mutation.SiteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SiteCrawlRule.site"`)
	}
	return nil
}

func (scruo *SiteCrawlRuleUpdateOne) sqlSave(ctx context.Context) (_node *SiteCrawlRule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sitecrawlrule.Table,
			Columns: sitecrawlrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sitecrawlrule.FieldID,
			},
		},
	}
	id, ok := scruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SiteCrawlRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sitecrawlrule.FieldID)
		for _, f := range fields {
			if !sitecrawlrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sitecrawlrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sitecrawlrule.FieldUpdatedAt,
		})
	}
	if value, ok := scruo.mutation.ArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldArticleSelector,
		})
	}
	if value, ok := scruo.mutation.TitleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldTitleSelector,
		})
	}
	if value, ok := scruo.mutation.LinkSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldLinkSelector,
		})
	}
	if value, ok := scruo.mutation.DescriptionSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldDescriptionSelector,
		})
	}
	if value, ok := scruo.mutation.HasDataToList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sitecrawlrule.FieldHasDataToList,
		})
	}
	if value, ok := scruo.mutation.DateSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldDateSelector,
		})
	}
	if value, ok := scruo.mutation.DateLayout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldDateLayout,
		})
	}
	if value, ok := scruo.mutation.IsTimeHumanize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sitecrawlrule.FieldIsTimeHumanize,
		})
	}
	if value, ok := scruo.mutation.IsSpa(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sitecrawlrule.FieldIsSpa,
		})
	}
	if scruo.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sitecrawlrule.SiteTable,
			Columns: []string{sitecrawlrule.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scruo.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sitecrawlrule.SiteTable,
			Columns: []string{sitecrawlrule.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SiteCrawlRule{config: scruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitecrawlrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
