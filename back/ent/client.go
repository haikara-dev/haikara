// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/cubdesign/dailyfj/ent/migrate"

	"github.com/cubdesign/dailyfj/ent/article"
	"github.com/cubdesign/dailyfj/ent/feed"
	"github.com/cubdesign/dailyfj/ent/site"
	"github.com/cubdesign/dailyfj/ent/sitecategory"
	"github.com/cubdesign/dailyfj/ent/sitecrawlrule"
	"github.com/cubdesign/dailyfj/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Article is the client for interacting with the Article builders.
	Article *ArticleClient
	// Feed is the client for interacting with the Feed builders.
	Feed *FeedClient
	// Site is the client for interacting with the Site builders.
	Site *SiteClient
	// SiteCategory is the client for interacting with the SiteCategory builders.
	SiteCategory *SiteCategoryClient
	// SiteCrawlRule is the client for interacting with the SiteCrawlRule builders.
	SiteCrawlRule *SiteCrawlRuleClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Article = NewArticleClient(c.config)
	c.Feed = NewFeedClient(c.config)
	c.Site = NewSiteClient(c.config)
	c.SiteCategory = NewSiteCategoryClient(c.config)
	c.SiteCrawlRule = NewSiteCrawlRuleClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Article:       NewArticleClient(cfg),
		Feed:          NewFeedClient(cfg),
		Site:          NewSiteClient(cfg),
		SiteCategory:  NewSiteCategoryClient(cfg),
		SiteCrawlRule: NewSiteCrawlRuleClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Article:       NewArticleClient(cfg),
		Feed:          NewFeedClient(cfg),
		Site:          NewSiteClient(cfg),
		SiteCategory:  NewSiteCategoryClient(cfg),
		SiteCrawlRule: NewSiteCrawlRuleClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Article.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Article.Use(hooks...)
	c.Feed.Use(hooks...)
	c.Site.Use(hooks...)
	c.SiteCategory.Use(hooks...)
	c.SiteCrawlRule.Use(hooks...)
	c.User.Use(hooks...)
}

// ArticleClient is a client for the Article schema.
type ArticleClient struct {
	config
}

// NewArticleClient returns a client for the Article from the given config.
func NewArticleClient(c config) *ArticleClient {
	return &ArticleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `article.Hooks(f(g(h())))`.
func (c *ArticleClient) Use(hooks ...Hook) {
	c.hooks.Article = append(c.hooks.Article, hooks...)
}

// Create returns a builder for creating a Article entity.
func (c *ArticleClient) Create() *ArticleCreate {
	mutation := newArticleMutation(c.config, OpCreate)
	return &ArticleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Article entities.
func (c *ArticleClient) CreateBulk(builders ...*ArticleCreate) *ArticleCreateBulk {
	return &ArticleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Article.
func (c *ArticleClient) Update() *ArticleUpdate {
	mutation := newArticleMutation(c.config, OpUpdate)
	return &ArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticleClient) UpdateOne(a *Article) *ArticleUpdateOne {
	mutation := newArticleMutation(c.config, OpUpdateOne, withArticle(a))
	return &ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticleClient) UpdateOneID(id int) *ArticleUpdateOne {
	mutation := newArticleMutation(c.config, OpUpdateOne, withArticleID(id))
	return &ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Article.
func (c *ArticleClient) Delete() *ArticleDelete {
	mutation := newArticleMutation(c.config, OpDelete)
	return &ArticleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArticleClient) DeleteOne(a *Article) *ArticleDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ArticleClient) DeleteOneID(id int) *ArticleDeleteOne {
	builder := c.Delete().Where(article.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticleDeleteOne{builder}
}

// Query returns a query builder for Article.
func (c *ArticleClient) Query() *ArticleQuery {
	return &ArticleQuery{
		config: c.config,
	}
}

// Get returns a Article entity by its id.
func (c *ArticleClient) Get(ctx context.Context, id int) (*Article, error) {
	return c.Query().Where(article.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticleClient) GetX(ctx context.Context, id int) *Article {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a Article.
func (c *ArticleClient) QuerySite(a *Article) *SiteQuery {
	query := &SiteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(article.Table, article.FieldID, id),
			sqlgraph.To(site.Table, site.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, article.SiteTable, article.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArticleClient) Hooks() []Hook {
	return c.hooks.Article
}

// FeedClient is a client for the Feed schema.
type FeedClient struct {
	config
}

// NewFeedClient returns a client for the Feed from the given config.
func NewFeedClient(c config) *FeedClient {
	return &FeedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feed.Hooks(f(g(h())))`.
func (c *FeedClient) Use(hooks ...Hook) {
	c.hooks.Feed = append(c.hooks.Feed, hooks...)
}

// Create returns a builder for creating a Feed entity.
func (c *FeedClient) Create() *FeedCreate {
	mutation := newFeedMutation(c.config, OpCreate)
	return &FeedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feed entities.
func (c *FeedClient) CreateBulk(builders ...*FeedCreate) *FeedCreateBulk {
	return &FeedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feed.
func (c *FeedClient) Update() *FeedUpdate {
	mutation := newFeedMutation(c.config, OpUpdate)
	return &FeedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedClient) UpdateOne(f *Feed) *FeedUpdateOne {
	mutation := newFeedMutation(c.config, OpUpdateOne, withFeed(f))
	return &FeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedClient) UpdateOneID(id int) *FeedUpdateOne {
	mutation := newFeedMutation(c.config, OpUpdateOne, withFeedID(id))
	return &FeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feed.
func (c *FeedClient) Delete() *FeedDelete {
	mutation := newFeedMutation(c.config, OpDelete)
	return &FeedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedClient) DeleteOne(f *Feed) *FeedDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *FeedClient) DeleteOneID(id int) *FeedDeleteOne {
	builder := c.Delete().Where(feed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedDeleteOne{builder}
}

// Query returns a query builder for Feed.
func (c *FeedClient) Query() *FeedQuery {
	return &FeedQuery{
		config: c.config,
	}
}

// Get returns a Feed entity by its id.
func (c *FeedClient) Get(ctx context.Context, id int) (*Feed, error) {
	return c.Query().Where(feed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedClient) GetX(ctx context.Context, id int) *Feed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a Feed.
func (c *FeedClient) QuerySite(f *Feed) *SiteQuery {
	query := &SiteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feed.Table, feed.FieldID, id),
			sqlgraph.To(site.Table, site.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feed.SiteTable, feed.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedClient) Hooks() []Hook {
	return c.hooks.Feed
}

// SiteClient is a client for the Site schema.
type SiteClient struct {
	config
}

// NewSiteClient returns a client for the Site from the given config.
func NewSiteClient(c config) *SiteClient {
	return &SiteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `site.Hooks(f(g(h())))`.
func (c *SiteClient) Use(hooks ...Hook) {
	c.hooks.Site = append(c.hooks.Site, hooks...)
}

// Create returns a builder for creating a Site entity.
func (c *SiteClient) Create() *SiteCreate {
	mutation := newSiteMutation(c.config, OpCreate)
	return &SiteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Site entities.
func (c *SiteClient) CreateBulk(builders ...*SiteCreate) *SiteCreateBulk {
	return &SiteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Site.
func (c *SiteClient) Update() *SiteUpdate {
	mutation := newSiteMutation(c.config, OpUpdate)
	return &SiteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SiteClient) UpdateOne(s *Site) *SiteUpdateOne {
	mutation := newSiteMutation(c.config, OpUpdateOne, withSite(s))
	return &SiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SiteClient) UpdateOneID(id int) *SiteUpdateOne {
	mutation := newSiteMutation(c.config, OpUpdateOne, withSiteID(id))
	return &SiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Site.
func (c *SiteClient) Delete() *SiteDelete {
	mutation := newSiteMutation(c.config, OpDelete)
	return &SiteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SiteClient) DeleteOne(s *Site) *SiteDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SiteClient) DeleteOneID(id int) *SiteDeleteOne {
	builder := c.Delete().Where(site.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SiteDeleteOne{builder}
}

// Query returns a query builder for Site.
func (c *SiteClient) Query() *SiteQuery {
	return &SiteQuery{
		config: c.config,
	}
}

// Get returns a Site entity by its id.
func (c *SiteClient) Get(ctx context.Context, id int) (*Site, error) {
	return c.Query().Where(site.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SiteClient) GetX(ctx context.Context, id int) *Site {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryArticles queries the articles edge of a Site.
func (c *SiteClient) QueryArticles(s *Site) *ArticleQuery {
	query := &ArticleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(site.Table, site.FieldID, id),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, site.ArticlesTable, site.ArticlesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeeds queries the feeds edge of a Site.
func (c *SiteClient) QueryFeeds(s *Site) *FeedQuery {
	query := &FeedQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(site.Table, site.FieldID, id),
			sqlgraph.To(feed.Table, feed.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, site.FeedsTable, site.FeedsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySiteCrawlRule queries the site_crawl_rule edge of a Site.
func (c *SiteClient) QuerySiteCrawlRule(s *Site) *SiteCrawlRuleQuery {
	query := &SiteCrawlRuleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(site.Table, site.FieldID, id),
			sqlgraph.To(sitecrawlrule.Table, sitecrawlrule.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, site.SiteCrawlRuleTable, site.SiteCrawlRuleColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySiteCategories queries the site_categories edge of a Site.
func (c *SiteClient) QuerySiteCategories(s *Site) *SiteCategoryQuery {
	query := &SiteCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(site.Table, site.FieldID, id),
			sqlgraph.To(sitecategory.Table, sitecategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, site.SiteCategoriesTable, site.SiteCategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SiteClient) Hooks() []Hook {
	return c.hooks.Site
}

// SiteCategoryClient is a client for the SiteCategory schema.
type SiteCategoryClient struct {
	config
}

// NewSiteCategoryClient returns a client for the SiteCategory from the given config.
func NewSiteCategoryClient(c config) *SiteCategoryClient {
	return &SiteCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sitecategory.Hooks(f(g(h())))`.
func (c *SiteCategoryClient) Use(hooks ...Hook) {
	c.hooks.SiteCategory = append(c.hooks.SiteCategory, hooks...)
}

// Create returns a builder for creating a SiteCategory entity.
func (c *SiteCategoryClient) Create() *SiteCategoryCreate {
	mutation := newSiteCategoryMutation(c.config, OpCreate)
	return &SiteCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SiteCategory entities.
func (c *SiteCategoryClient) CreateBulk(builders ...*SiteCategoryCreate) *SiteCategoryCreateBulk {
	return &SiteCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SiteCategory.
func (c *SiteCategoryClient) Update() *SiteCategoryUpdate {
	mutation := newSiteCategoryMutation(c.config, OpUpdate)
	return &SiteCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SiteCategoryClient) UpdateOne(sc *SiteCategory) *SiteCategoryUpdateOne {
	mutation := newSiteCategoryMutation(c.config, OpUpdateOne, withSiteCategory(sc))
	return &SiteCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SiteCategoryClient) UpdateOneID(id int) *SiteCategoryUpdateOne {
	mutation := newSiteCategoryMutation(c.config, OpUpdateOne, withSiteCategoryID(id))
	return &SiteCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SiteCategory.
func (c *SiteCategoryClient) Delete() *SiteCategoryDelete {
	mutation := newSiteCategoryMutation(c.config, OpDelete)
	return &SiteCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SiteCategoryClient) DeleteOne(sc *SiteCategory) *SiteCategoryDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SiteCategoryClient) DeleteOneID(id int) *SiteCategoryDeleteOne {
	builder := c.Delete().Where(sitecategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SiteCategoryDeleteOne{builder}
}

// Query returns a query builder for SiteCategory.
func (c *SiteCategoryClient) Query() *SiteCategoryQuery {
	return &SiteCategoryQuery{
		config: c.config,
	}
}

// Get returns a SiteCategory entity by its id.
func (c *SiteCategoryClient) Get(ctx context.Context, id int) (*SiteCategory, error) {
	return c.Query().Where(sitecategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SiteCategoryClient) GetX(ctx context.Context, id int) *SiteCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySites queries the sites edge of a SiteCategory.
func (c *SiteCategoryClient) QuerySites(sc *SiteCategory) *SiteQuery {
	query := &SiteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sitecategory.Table, sitecategory.FieldID, id),
			sqlgraph.To(site.Table, site.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, sitecategory.SitesTable, sitecategory.SitesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SiteCategoryClient) Hooks() []Hook {
	return c.hooks.SiteCategory
}

// SiteCrawlRuleClient is a client for the SiteCrawlRule schema.
type SiteCrawlRuleClient struct {
	config
}

// NewSiteCrawlRuleClient returns a client for the SiteCrawlRule from the given config.
func NewSiteCrawlRuleClient(c config) *SiteCrawlRuleClient {
	return &SiteCrawlRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sitecrawlrule.Hooks(f(g(h())))`.
func (c *SiteCrawlRuleClient) Use(hooks ...Hook) {
	c.hooks.SiteCrawlRule = append(c.hooks.SiteCrawlRule, hooks...)
}

// Create returns a builder for creating a SiteCrawlRule entity.
func (c *SiteCrawlRuleClient) Create() *SiteCrawlRuleCreate {
	mutation := newSiteCrawlRuleMutation(c.config, OpCreate)
	return &SiteCrawlRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SiteCrawlRule entities.
func (c *SiteCrawlRuleClient) CreateBulk(builders ...*SiteCrawlRuleCreate) *SiteCrawlRuleCreateBulk {
	return &SiteCrawlRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SiteCrawlRule.
func (c *SiteCrawlRuleClient) Update() *SiteCrawlRuleUpdate {
	mutation := newSiteCrawlRuleMutation(c.config, OpUpdate)
	return &SiteCrawlRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SiteCrawlRuleClient) UpdateOne(scr *SiteCrawlRule) *SiteCrawlRuleUpdateOne {
	mutation := newSiteCrawlRuleMutation(c.config, OpUpdateOne, withSiteCrawlRule(scr))
	return &SiteCrawlRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SiteCrawlRuleClient) UpdateOneID(id int) *SiteCrawlRuleUpdateOne {
	mutation := newSiteCrawlRuleMutation(c.config, OpUpdateOne, withSiteCrawlRuleID(id))
	return &SiteCrawlRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SiteCrawlRule.
func (c *SiteCrawlRuleClient) Delete() *SiteCrawlRuleDelete {
	mutation := newSiteCrawlRuleMutation(c.config, OpDelete)
	return &SiteCrawlRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SiteCrawlRuleClient) DeleteOne(scr *SiteCrawlRule) *SiteCrawlRuleDeleteOne {
	return c.DeleteOneID(scr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SiteCrawlRuleClient) DeleteOneID(id int) *SiteCrawlRuleDeleteOne {
	builder := c.Delete().Where(sitecrawlrule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SiteCrawlRuleDeleteOne{builder}
}

// Query returns a query builder for SiteCrawlRule.
func (c *SiteCrawlRuleClient) Query() *SiteCrawlRuleQuery {
	return &SiteCrawlRuleQuery{
		config: c.config,
	}
}

// Get returns a SiteCrawlRule entity by its id.
func (c *SiteCrawlRuleClient) Get(ctx context.Context, id int) (*SiteCrawlRule, error) {
	return c.Query().Where(sitecrawlrule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SiteCrawlRuleClient) GetX(ctx context.Context, id int) *SiteCrawlRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a SiteCrawlRule.
func (c *SiteCrawlRuleClient) QuerySite(scr *SiteCrawlRule) *SiteQuery {
	query := &SiteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := scr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sitecrawlrule.Table, sitecrawlrule.FieldID, id),
			sqlgraph.To(site.Table, site.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, sitecrawlrule.SiteTable, sitecrawlrule.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(scr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SiteCrawlRuleClient) Hooks() []Hook {
	return c.hooks.SiteCrawlRule
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
