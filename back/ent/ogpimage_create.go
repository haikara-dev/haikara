// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/haikara-dev/haikara/ent/article"
	"github.com/haikara-dev/haikara/ent/ogpimage"
)

// OGPImageCreate is the builder for creating a OGPImage entity.
type OGPImageCreate struct {
	config
	mutation *OGPImageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oic *OGPImageCreate) SetCreatedAt(t time.Time) *OGPImageCreate {
	oic.mutation.SetCreatedAt(t)
	return oic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oic *OGPImageCreate) SetNillableCreatedAt(t *time.Time) *OGPImageCreate {
	if t != nil {
		oic.SetCreatedAt(*t)
	}
	return oic
}

// SetUpdatedAt sets the "updated_at" field.
func (oic *OGPImageCreate) SetUpdatedAt(t time.Time) *OGPImageCreate {
	oic.mutation.SetUpdatedAt(t)
	return oic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oic *OGPImageCreate) SetNillableUpdatedAt(t *time.Time) *OGPImageCreate {
	if t != nil {
		oic.SetUpdatedAt(*t)
	}
	return oic
}

// SetFileName sets the "file_name" field.
func (oic *OGPImageCreate) SetFileName(s string) *OGPImageCreate {
	oic.mutation.SetFileName(s)
	return oic
}

// SetFilePath sets the "file_path" field.
func (oic *OGPImageCreate) SetFilePath(s string) *OGPImageCreate {
	oic.mutation.SetFilePath(s)
	return oic
}

// SetOriginURL sets the "origin_url" field.
func (oic *OGPImageCreate) SetOriginURL(s string) *OGPImageCreate {
	oic.mutation.SetOriginURL(s)
	return oic
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (oic *OGPImageCreate) SetArticleID(id int) *OGPImageCreate {
	oic.mutation.SetArticleID(id)
	return oic
}

// SetArticle sets the "article" edge to the Article entity.
func (oic *OGPImageCreate) SetArticle(a *Article) *OGPImageCreate {
	return oic.SetArticleID(a.ID)
}

// Mutation returns the OGPImageMutation object of the builder.
func (oic *OGPImageCreate) Mutation() *OGPImageMutation {
	return oic.mutation
}

// Save creates the OGPImage in the database.
func (oic *OGPImageCreate) Save(ctx context.Context) (*OGPImage, error) {
	var (
		err  error
		node *OGPImage
	)
	oic.defaults()
	if len(oic.hooks) == 0 {
		if err = oic.check(); err != nil {
			return nil, err
		}
		node, err = oic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OGPImageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oic.check(); err != nil {
				return nil, err
			}
			oic.mutation = mutation
			if node, err = oic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oic.hooks) - 1; i >= 0; i-- {
			if oic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OGPImage)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OGPImageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oic *OGPImageCreate) SaveX(ctx context.Context) *OGPImage {
	v, err := oic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oic *OGPImageCreate) Exec(ctx context.Context) error {
	_, err := oic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oic *OGPImageCreate) ExecX(ctx context.Context) {
	if err := oic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oic *OGPImageCreate) defaults() {
	if _, ok := oic.mutation.CreatedAt(); !ok {
		v := ogpimage.DefaultCreatedAt()
		oic.mutation.SetCreatedAt(v)
	}
	if _, ok := oic.mutation.UpdatedAt(); !ok {
		v := ogpimage.DefaultUpdatedAt()
		oic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oic *OGPImageCreate) check() error {
	if _, ok := oic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OGPImage.created_at"`)}
	}
	if _, ok := oic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OGPImage.updated_at"`)}
	}
	if _, ok := oic.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "OGPImage.file_name"`)}
	}
	if _, ok := oic.mutation.FilePath(); !ok {
		return &ValidationError{Name: "file_path", err: errors.New(`ent: missing required field "OGPImage.file_path"`)}
	}
	if _, ok := oic.mutation.OriginURL(); !ok {
		return &ValidationError{Name: "origin_url", err: errors.New(`ent: missing required field "OGPImage.origin_url"`)}
	}
	if _, ok := oic.mutation.ArticleID(); !ok {
		return &ValidationError{Name: "article", err: errors.New(`ent: missing required edge "OGPImage.article"`)}
	}
	return nil
}

func (oic *OGPImageCreate) sqlSave(ctx context.Context) (*OGPImage, error) {
	_node, _spec := oic.createSpec()
	if err := sqlgraph.CreateNode(ctx, oic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oic *OGPImageCreate) createSpec() (*OGPImage, *sqlgraph.CreateSpec) {
	var (
		_node = &OGPImage{config: oic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ogpimage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ogpimage.FieldID,
			},
		}
	)
	if value, ok := oic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ogpimage.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ogpimage.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := oic.mutation.FileName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ogpimage.FieldFileName,
		})
		_node.FileName = value
	}
	if value, ok := oic.mutation.FilePath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ogpimage.FieldFilePath,
		})
		_node.FilePath = value
	}
	if value, ok := oic.mutation.OriginURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ogpimage.FieldOriginURL,
		})
		_node.OriginURL = value
	}
	if nodes := oic.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ogpimage.ArticleTable,
			Columns: []string{ogpimage.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.article_ogp_image = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OGPImageCreateBulk is the builder for creating many OGPImage entities in bulk.
type OGPImageCreateBulk struct {
	config
	builders []*OGPImageCreate
}

// Save creates the OGPImage entities in the database.
func (oicb *OGPImageCreateBulk) Save(ctx context.Context) ([]*OGPImage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oicb.builders))
	nodes := make([]*OGPImage, len(oicb.builders))
	mutators := make([]Mutator, len(oicb.builders))
	for i := range oicb.builders {
		func(i int, root context.Context) {
			builder := oicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OGPImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oicb *OGPImageCreateBulk) SaveX(ctx context.Context) []*OGPImage {
	v, err := oicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oicb *OGPImageCreateBulk) Exec(ctx context.Context) error {
	_, err := oicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oicb *OGPImageCreateBulk) ExecX(ctx context.Context) {
	if err := oicb.Exec(ctx); err != nil {
		panic(err)
	}
}
