// Code generated by ent, DO NOT EDIT.

package sitecrawlrule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cubdesign/dailyfj/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ArticleSelector applies equality check predicate on the "article_selector" field. It's identical to ArticleSelectorEQ.
func ArticleSelector(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArticleSelector), v))
	})
}

// TitleSelector applies equality check predicate on the "title_selector" field. It's identical to TitleSelectorEQ.
func TitleSelector(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitleSelector), v))
	})
}

// LinkSelector applies equality check predicate on the "link_selector" field. It's identical to LinkSelectorEQ.
func LinkSelector(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkSelector), v))
	})
}

// DescriptionSelector applies equality check predicate on the "description_selector" field. It's identical to DescriptionSelectorEQ.
func DescriptionSelector(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescriptionSelector), v))
	})
}

// HasDataToList applies equality check predicate on the "has_data_to_list" field. It's identical to HasDataToListEQ.
func HasDataToList(v bool) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasDataToList), v))
	})
}

// DateSelector applies equality check predicate on the "date_selector" field. It's identical to DateSelectorEQ.
func DateSelector(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateSelector), v))
	})
}

// DateLayout applies equality check predicate on the "date_layout" field. It's identical to DateLayoutEQ.
func DateLayout(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateLayout), v))
	})
}

// IsTimeHumanize applies equality check predicate on the "is_time_humanize" field. It's identical to IsTimeHumanizeEQ.
func IsTimeHumanize(v bool) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsTimeHumanize), v))
	})
}

// IsSpa applies equality check predicate on the "is_spa" field. It's identical to IsSpaEQ.
func IsSpa(v bool) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSpa), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ArticleSelectorEQ applies the EQ predicate on the "article_selector" field.
func ArticleSelectorEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArticleSelector), v))
	})
}

// ArticleSelectorNEQ applies the NEQ predicate on the "article_selector" field.
func ArticleSelectorNEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArticleSelector), v))
	})
}

// ArticleSelectorIn applies the In predicate on the "article_selector" field.
func ArticleSelectorIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldArticleSelector), v...))
	})
}

// ArticleSelectorNotIn applies the NotIn predicate on the "article_selector" field.
func ArticleSelectorNotIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldArticleSelector), v...))
	})
}

// ArticleSelectorGT applies the GT predicate on the "article_selector" field.
func ArticleSelectorGT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArticleSelector), v))
	})
}

// ArticleSelectorGTE applies the GTE predicate on the "article_selector" field.
func ArticleSelectorGTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArticleSelector), v))
	})
}

// ArticleSelectorLT applies the LT predicate on the "article_selector" field.
func ArticleSelectorLT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArticleSelector), v))
	})
}

// ArticleSelectorLTE applies the LTE predicate on the "article_selector" field.
func ArticleSelectorLTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArticleSelector), v))
	})
}

// ArticleSelectorContains applies the Contains predicate on the "article_selector" field.
func ArticleSelectorContains(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArticleSelector), v))
	})
}

// ArticleSelectorHasPrefix applies the HasPrefix predicate on the "article_selector" field.
func ArticleSelectorHasPrefix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArticleSelector), v))
	})
}

// ArticleSelectorHasSuffix applies the HasSuffix predicate on the "article_selector" field.
func ArticleSelectorHasSuffix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArticleSelector), v))
	})
}

// ArticleSelectorEqualFold applies the EqualFold predicate on the "article_selector" field.
func ArticleSelectorEqualFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArticleSelector), v))
	})
}

// ArticleSelectorContainsFold applies the ContainsFold predicate on the "article_selector" field.
func ArticleSelectorContainsFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArticleSelector), v))
	})
}

// TitleSelectorEQ applies the EQ predicate on the "title_selector" field.
func TitleSelectorEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitleSelector), v))
	})
}

// TitleSelectorNEQ applies the NEQ predicate on the "title_selector" field.
func TitleSelectorNEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitleSelector), v))
	})
}

// TitleSelectorIn applies the In predicate on the "title_selector" field.
func TitleSelectorIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitleSelector), v...))
	})
}

// TitleSelectorNotIn applies the NotIn predicate on the "title_selector" field.
func TitleSelectorNotIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitleSelector), v...))
	})
}

// TitleSelectorGT applies the GT predicate on the "title_selector" field.
func TitleSelectorGT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitleSelector), v))
	})
}

// TitleSelectorGTE applies the GTE predicate on the "title_selector" field.
func TitleSelectorGTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitleSelector), v))
	})
}

// TitleSelectorLT applies the LT predicate on the "title_selector" field.
func TitleSelectorLT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitleSelector), v))
	})
}

// TitleSelectorLTE applies the LTE predicate on the "title_selector" field.
func TitleSelectorLTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitleSelector), v))
	})
}

// TitleSelectorContains applies the Contains predicate on the "title_selector" field.
func TitleSelectorContains(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitleSelector), v))
	})
}

// TitleSelectorHasPrefix applies the HasPrefix predicate on the "title_selector" field.
func TitleSelectorHasPrefix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitleSelector), v))
	})
}

// TitleSelectorHasSuffix applies the HasSuffix predicate on the "title_selector" field.
func TitleSelectorHasSuffix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitleSelector), v))
	})
}

// TitleSelectorEqualFold applies the EqualFold predicate on the "title_selector" field.
func TitleSelectorEqualFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitleSelector), v))
	})
}

// TitleSelectorContainsFold applies the ContainsFold predicate on the "title_selector" field.
func TitleSelectorContainsFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitleSelector), v))
	})
}

// LinkSelectorEQ applies the EQ predicate on the "link_selector" field.
func LinkSelectorEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkSelector), v))
	})
}

// LinkSelectorNEQ applies the NEQ predicate on the "link_selector" field.
func LinkSelectorNEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLinkSelector), v))
	})
}

// LinkSelectorIn applies the In predicate on the "link_selector" field.
func LinkSelectorIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLinkSelector), v...))
	})
}

// LinkSelectorNotIn applies the NotIn predicate on the "link_selector" field.
func LinkSelectorNotIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLinkSelector), v...))
	})
}

// LinkSelectorGT applies the GT predicate on the "link_selector" field.
func LinkSelectorGT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLinkSelector), v))
	})
}

// LinkSelectorGTE applies the GTE predicate on the "link_selector" field.
func LinkSelectorGTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLinkSelector), v))
	})
}

// LinkSelectorLT applies the LT predicate on the "link_selector" field.
func LinkSelectorLT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLinkSelector), v))
	})
}

// LinkSelectorLTE applies the LTE predicate on the "link_selector" field.
func LinkSelectorLTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLinkSelector), v))
	})
}

// LinkSelectorContains applies the Contains predicate on the "link_selector" field.
func LinkSelectorContains(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLinkSelector), v))
	})
}

// LinkSelectorHasPrefix applies the HasPrefix predicate on the "link_selector" field.
func LinkSelectorHasPrefix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLinkSelector), v))
	})
}

// LinkSelectorHasSuffix applies the HasSuffix predicate on the "link_selector" field.
func LinkSelectorHasSuffix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLinkSelector), v))
	})
}

// LinkSelectorEqualFold applies the EqualFold predicate on the "link_selector" field.
func LinkSelectorEqualFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLinkSelector), v))
	})
}

// LinkSelectorContainsFold applies the ContainsFold predicate on the "link_selector" field.
func LinkSelectorContainsFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLinkSelector), v))
	})
}

// DescriptionSelectorEQ applies the EQ predicate on the "description_selector" field.
func DescriptionSelectorEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescriptionSelector), v))
	})
}

// DescriptionSelectorNEQ applies the NEQ predicate on the "description_selector" field.
func DescriptionSelectorNEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescriptionSelector), v))
	})
}

// DescriptionSelectorIn applies the In predicate on the "description_selector" field.
func DescriptionSelectorIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescriptionSelector), v...))
	})
}

// DescriptionSelectorNotIn applies the NotIn predicate on the "description_selector" field.
func DescriptionSelectorNotIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescriptionSelector), v...))
	})
}

// DescriptionSelectorGT applies the GT predicate on the "description_selector" field.
func DescriptionSelectorGT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescriptionSelector), v))
	})
}

// DescriptionSelectorGTE applies the GTE predicate on the "description_selector" field.
func DescriptionSelectorGTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescriptionSelector), v))
	})
}

// DescriptionSelectorLT applies the LT predicate on the "description_selector" field.
func DescriptionSelectorLT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescriptionSelector), v))
	})
}

// DescriptionSelectorLTE applies the LTE predicate on the "description_selector" field.
func DescriptionSelectorLTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescriptionSelector), v))
	})
}

// DescriptionSelectorContains applies the Contains predicate on the "description_selector" field.
func DescriptionSelectorContains(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescriptionSelector), v))
	})
}

// DescriptionSelectorHasPrefix applies the HasPrefix predicate on the "description_selector" field.
func DescriptionSelectorHasPrefix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescriptionSelector), v))
	})
}

// DescriptionSelectorHasSuffix applies the HasSuffix predicate on the "description_selector" field.
func DescriptionSelectorHasSuffix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescriptionSelector), v))
	})
}

// DescriptionSelectorEqualFold applies the EqualFold predicate on the "description_selector" field.
func DescriptionSelectorEqualFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescriptionSelector), v))
	})
}

// DescriptionSelectorContainsFold applies the ContainsFold predicate on the "description_selector" field.
func DescriptionSelectorContainsFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescriptionSelector), v))
	})
}

// HasDataToListEQ applies the EQ predicate on the "has_data_to_list" field.
func HasDataToListEQ(v bool) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasDataToList), v))
	})
}

// HasDataToListNEQ applies the NEQ predicate on the "has_data_to_list" field.
func HasDataToListNEQ(v bool) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasDataToList), v))
	})
}

// DateSelectorEQ applies the EQ predicate on the "date_selector" field.
func DateSelectorEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateSelector), v))
	})
}

// DateSelectorNEQ applies the NEQ predicate on the "date_selector" field.
func DateSelectorNEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateSelector), v))
	})
}

// DateSelectorIn applies the In predicate on the "date_selector" field.
func DateSelectorIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDateSelector), v...))
	})
}

// DateSelectorNotIn applies the NotIn predicate on the "date_selector" field.
func DateSelectorNotIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDateSelector), v...))
	})
}

// DateSelectorGT applies the GT predicate on the "date_selector" field.
func DateSelectorGT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateSelector), v))
	})
}

// DateSelectorGTE applies the GTE predicate on the "date_selector" field.
func DateSelectorGTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateSelector), v))
	})
}

// DateSelectorLT applies the LT predicate on the "date_selector" field.
func DateSelectorLT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateSelector), v))
	})
}

// DateSelectorLTE applies the LTE predicate on the "date_selector" field.
func DateSelectorLTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateSelector), v))
	})
}

// DateSelectorContains applies the Contains predicate on the "date_selector" field.
func DateSelectorContains(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDateSelector), v))
	})
}

// DateSelectorHasPrefix applies the HasPrefix predicate on the "date_selector" field.
func DateSelectorHasPrefix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDateSelector), v))
	})
}

// DateSelectorHasSuffix applies the HasSuffix predicate on the "date_selector" field.
func DateSelectorHasSuffix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDateSelector), v))
	})
}

// DateSelectorEqualFold applies the EqualFold predicate on the "date_selector" field.
func DateSelectorEqualFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDateSelector), v))
	})
}

// DateSelectorContainsFold applies the ContainsFold predicate on the "date_selector" field.
func DateSelectorContainsFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDateSelector), v))
	})
}

// DateLayoutEQ applies the EQ predicate on the "date_layout" field.
func DateLayoutEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateLayout), v))
	})
}

// DateLayoutNEQ applies the NEQ predicate on the "date_layout" field.
func DateLayoutNEQ(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateLayout), v))
	})
}

// DateLayoutIn applies the In predicate on the "date_layout" field.
func DateLayoutIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDateLayout), v...))
	})
}

// DateLayoutNotIn applies the NotIn predicate on the "date_layout" field.
func DateLayoutNotIn(vs ...string) predicate.SiteCrawlRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDateLayout), v...))
	})
}

// DateLayoutGT applies the GT predicate on the "date_layout" field.
func DateLayoutGT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateLayout), v))
	})
}

// DateLayoutGTE applies the GTE predicate on the "date_layout" field.
func DateLayoutGTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateLayout), v))
	})
}

// DateLayoutLT applies the LT predicate on the "date_layout" field.
func DateLayoutLT(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateLayout), v))
	})
}

// DateLayoutLTE applies the LTE predicate on the "date_layout" field.
func DateLayoutLTE(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateLayout), v))
	})
}

// DateLayoutContains applies the Contains predicate on the "date_layout" field.
func DateLayoutContains(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDateLayout), v))
	})
}

// DateLayoutHasPrefix applies the HasPrefix predicate on the "date_layout" field.
func DateLayoutHasPrefix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDateLayout), v))
	})
}

// DateLayoutHasSuffix applies the HasSuffix predicate on the "date_layout" field.
func DateLayoutHasSuffix(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDateLayout), v))
	})
}

// DateLayoutEqualFold applies the EqualFold predicate on the "date_layout" field.
func DateLayoutEqualFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDateLayout), v))
	})
}

// DateLayoutContainsFold applies the ContainsFold predicate on the "date_layout" field.
func DateLayoutContainsFold(v string) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDateLayout), v))
	})
}

// IsTimeHumanizeEQ applies the EQ predicate on the "is_time_humanize" field.
func IsTimeHumanizeEQ(v bool) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsTimeHumanize), v))
	})
}

// IsTimeHumanizeNEQ applies the NEQ predicate on the "is_time_humanize" field.
func IsTimeHumanizeNEQ(v bool) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsTimeHumanize), v))
	})
}

// IsSpaEQ applies the EQ predicate on the "is_spa" field.
func IsSpaEQ(v bool) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSpa), v))
	})
}

// IsSpaNEQ applies the NEQ predicate on the "is_spa" field.
func IsSpaNEQ(v bool) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsSpa), v))
	})
}

// HasSite applies the HasEdge predicate on the "site" edge.
func HasSite() predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SiteTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SiteTable, SiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSiteWith applies the HasEdge predicate on the "site" edge with a given conditions (other predicates).
func HasSiteWith(preds ...predicate.Site) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SiteInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SiteTable, SiteColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SiteCrawlRule) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SiteCrawlRule) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SiteCrawlRule) predicate.SiteCrawlRule {
	return predicate.SiteCrawlRule(func(s *sql.Selector) {
		p(s.Not())
	})
}
