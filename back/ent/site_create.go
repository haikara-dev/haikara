// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cubdesign/dailyfj/ent/article"
	"github.com/cubdesign/dailyfj/ent/feed"
	"github.com/cubdesign/dailyfj/ent/site"
	"github.com/cubdesign/dailyfj/ent/sitecategory"
	"github.com/cubdesign/dailyfj/ent/sitecrawlrule"
)

// SiteCreate is the builder for creating a Site entity.
type SiteCreate struct {
	config
	mutation *SiteMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SiteCreate) SetCreatedAt(t time.Time) *SiteCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SiteCreate) SetNillableCreatedAt(t *time.Time) *SiteCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SiteCreate) SetUpdatedAt(t time.Time) *SiteCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SiteCreate) SetNillableUpdatedAt(t *time.Time) *SiteCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SiteCreate) SetName(s string) *SiteCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetURL sets the "url" field.
func (sc *SiteCreate) SetURL(s string) *SiteCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetFeedURL sets the "feed_url" field.
func (sc *SiteCreate) SetFeedURL(s string) *SiteCreate {
	sc.mutation.SetFeedURL(s)
	return sc
}

// SetActive sets the "active" field.
func (sc *SiteCreate) SetActive(b bool) *SiteCreate {
	sc.mutation.SetActive(b)
	return sc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (sc *SiteCreate) SetNillableActive(b *bool) *SiteCreate {
	if b != nil {
		sc.SetActive(*b)
	}
	return sc
}

// AddArticleIDs adds the "articles" edge to the Article entity by IDs.
func (sc *SiteCreate) AddArticleIDs(ids ...int) *SiteCreate {
	sc.mutation.AddArticleIDs(ids...)
	return sc
}

// AddArticles adds the "articles" edges to the Article entity.
func (sc *SiteCreate) AddArticles(a ...*Article) *SiteCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sc.AddArticleIDs(ids...)
}

// AddFeedIDs adds the "feeds" edge to the Feed entity by IDs.
func (sc *SiteCreate) AddFeedIDs(ids ...int) *SiteCreate {
	sc.mutation.AddFeedIDs(ids...)
	return sc
}

// AddFeeds adds the "feeds" edges to the Feed entity.
func (sc *SiteCreate) AddFeeds(f ...*Feed) *SiteCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return sc.AddFeedIDs(ids...)
}

// SetSiteCrawlRuleID sets the "site_crawl_rule" edge to the SiteCrawlRule entity by ID.
func (sc *SiteCreate) SetSiteCrawlRuleID(id int) *SiteCreate {
	sc.mutation.SetSiteCrawlRuleID(id)
	return sc
}

// SetNillableSiteCrawlRuleID sets the "site_crawl_rule" edge to the SiteCrawlRule entity by ID if the given value is not nil.
func (sc *SiteCreate) SetNillableSiteCrawlRuleID(id *int) *SiteCreate {
	if id != nil {
		sc = sc.SetSiteCrawlRuleID(*id)
	}
	return sc
}

// SetSiteCrawlRule sets the "site_crawl_rule" edge to the SiteCrawlRule entity.
func (sc *SiteCreate) SetSiteCrawlRule(s *SiteCrawlRule) *SiteCreate {
	return sc.SetSiteCrawlRuleID(s.ID)
}

// AddSiteCategoryIDs adds the "site_categories" edge to the SiteCategory entity by IDs.
func (sc *SiteCreate) AddSiteCategoryIDs(ids ...int) *SiteCreate {
	sc.mutation.AddSiteCategoryIDs(ids...)
	return sc
}

// AddSiteCategories adds the "site_categories" edges to the SiteCategory entity.
func (sc *SiteCreate) AddSiteCategories(s ...*SiteCategory) *SiteCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSiteCategoryIDs(ids...)
}

// Mutation returns the SiteMutation object of the builder.
func (sc *SiteCreate) Mutation() *SiteMutation {
	return sc.mutation
}

// Save creates the Site in the database.
func (sc *SiteCreate) Save(ctx context.Context) (*Site, error) {
	var (
		err  error
		node *Site
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SiteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Site)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SiteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SiteCreate) SaveX(ctx context.Context) *Site {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SiteCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SiteCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SiteCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := site.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := site.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Active(); !ok {
		v := site.DefaultActive
		sc.mutation.SetActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SiteCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Site.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Site.updated_at"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Site.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := site.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Site.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Site.url"`)}
	}
	if v, ok := sc.mutation.URL(); ok {
		if err := site.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Site.url": %w`, err)}
		}
	}
	if _, ok := sc.mutation.FeedURL(); !ok {
		return &ValidationError{Name: "feed_url", err: errors.New(`ent: missing required field "Site.feed_url"`)}
	}
	if _, ok := sc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Site.active"`)}
	}
	return nil
}

func (sc *SiteCreate) sqlSave(ctx context.Context) (*Site, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SiteCreate) createSpec() (*Site, *sqlgraph.CreateSpec) {
	var (
		_node = &Site{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: site.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: site.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: site.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: site.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: site.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: site.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := sc.mutation.FeedURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: site.FieldFeedURL,
		})
		_node.FeedURL = value
	}
	if value, ok := sc.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: site.FieldActive,
		})
		_node.Active = value
	}
	if nodes := sc.mutation.ArticlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.ArticlesTable,
			Columns: []string{site.ArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.FeedsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.FeedsTable,
			Columns: []string{site.FeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SiteCrawlRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   site.SiteCrawlRuleTable,
			Columns: []string{site.SiteCrawlRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sitecrawlrule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SiteCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   site.SiteCategoriesTable,
			Columns: site.SiteCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sitecategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SiteCreateBulk is the builder for creating many Site entities in bulk.
type SiteCreateBulk struct {
	config
	builders []*SiteCreate
}

// Save creates the Site entities in the database.
func (scb *SiteCreateBulk) Save(ctx context.Context) ([]*Site, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Site, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SiteCreateBulk) SaveX(ctx context.Context) []*Site {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SiteCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SiteCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
