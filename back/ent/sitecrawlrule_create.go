// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cubdesign/haikara/ent/site"
	"github.com/cubdesign/haikara/ent/sitecrawlrule"
)

// SiteCrawlRuleCreate is the builder for creating a SiteCrawlRule entity.
type SiteCrawlRuleCreate struct {
	config
	mutation *SiteCrawlRuleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (scrc *SiteCrawlRuleCreate) SetCreatedAt(t time.Time) *SiteCrawlRuleCreate {
	scrc.mutation.SetCreatedAt(t)
	return scrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scrc *SiteCrawlRuleCreate) SetNillableCreatedAt(t *time.Time) *SiteCrawlRuleCreate {
	if t != nil {
		scrc.SetCreatedAt(*t)
	}
	return scrc
}

// SetUpdatedAt sets the "updated_at" field.
func (scrc *SiteCrawlRuleCreate) SetUpdatedAt(t time.Time) *SiteCrawlRuleCreate {
	scrc.mutation.SetUpdatedAt(t)
	return scrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scrc *SiteCrawlRuleCreate) SetNillableUpdatedAt(t *time.Time) *SiteCrawlRuleCreate {
	if t != nil {
		scrc.SetUpdatedAt(*t)
	}
	return scrc
}

// SetArticleSelector sets the "article_selector" field.
func (scrc *SiteCrawlRuleCreate) SetArticleSelector(s string) *SiteCrawlRuleCreate {
	scrc.mutation.SetArticleSelector(s)
	return scrc
}

// SetTitleSelector sets the "title_selector" field.
func (scrc *SiteCrawlRuleCreate) SetTitleSelector(s string) *SiteCrawlRuleCreate {
	scrc.mutation.SetTitleSelector(s)
	return scrc
}

// SetLinkSelector sets the "link_selector" field.
func (scrc *SiteCrawlRuleCreate) SetLinkSelector(s string) *SiteCrawlRuleCreate {
	scrc.mutation.SetLinkSelector(s)
	return scrc
}

// SetDescriptionSelector sets the "description_selector" field.
func (scrc *SiteCrawlRuleCreate) SetDescriptionSelector(s string) *SiteCrawlRuleCreate {
	scrc.mutation.SetDescriptionSelector(s)
	return scrc
}

// SetHasDataToList sets the "has_data_to_list" field.
func (scrc *SiteCrawlRuleCreate) SetHasDataToList(b bool) *SiteCrawlRuleCreate {
	scrc.mutation.SetHasDataToList(b)
	return scrc
}

// SetNillableHasDataToList sets the "has_data_to_list" field if the given value is not nil.
func (scrc *SiteCrawlRuleCreate) SetNillableHasDataToList(b *bool) *SiteCrawlRuleCreate {
	if b != nil {
		scrc.SetHasDataToList(*b)
	}
	return scrc
}

// SetDateSelector sets the "date_selector" field.
func (scrc *SiteCrawlRuleCreate) SetDateSelector(s string) *SiteCrawlRuleCreate {
	scrc.mutation.SetDateSelector(s)
	return scrc
}

// SetDateLayout sets the "date_layout" field.
func (scrc *SiteCrawlRuleCreate) SetDateLayout(s string) *SiteCrawlRuleCreate {
	scrc.mutation.SetDateLayout(s)
	return scrc
}

// SetIsTimeHumanize sets the "is_time_humanize" field.
func (scrc *SiteCrawlRuleCreate) SetIsTimeHumanize(b bool) *SiteCrawlRuleCreate {
	scrc.mutation.SetIsTimeHumanize(b)
	return scrc
}

// SetNillableIsTimeHumanize sets the "is_time_humanize" field if the given value is not nil.
func (scrc *SiteCrawlRuleCreate) SetNillableIsTimeHumanize(b *bool) *SiteCrawlRuleCreate {
	if b != nil {
		scrc.SetIsTimeHumanize(*b)
	}
	return scrc
}

// SetIsSpa sets the "is_spa" field.
func (scrc *SiteCrawlRuleCreate) SetIsSpa(b bool) *SiteCrawlRuleCreate {
	scrc.mutation.SetIsSpa(b)
	return scrc
}

// SetNillableIsSpa sets the "is_spa" field if the given value is not nil.
func (scrc *SiteCrawlRuleCreate) SetNillableIsSpa(b *bool) *SiteCrawlRuleCreate {
	if b != nil {
		scrc.SetIsSpa(*b)
	}
	return scrc
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (scrc *SiteCrawlRuleCreate) SetSiteID(id int) *SiteCrawlRuleCreate {
	scrc.mutation.SetSiteID(id)
	return scrc
}

// SetSite sets the "site" edge to the Site entity.
func (scrc *SiteCrawlRuleCreate) SetSite(s *Site) *SiteCrawlRuleCreate {
	return scrc.SetSiteID(s.ID)
}

// Mutation returns the SiteCrawlRuleMutation object of the builder.
func (scrc *SiteCrawlRuleCreate) Mutation() *SiteCrawlRuleMutation {
	return scrc.mutation
}

// Save creates the SiteCrawlRule in the database.
func (scrc *SiteCrawlRuleCreate) Save(ctx context.Context) (*SiteCrawlRule, error) {
	var (
		err  error
		node *SiteCrawlRule
	)
	scrc.defaults()
	if len(scrc.hooks) == 0 {
		if err = scrc.check(); err != nil {
			return nil, err
		}
		node, err = scrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SiteCrawlRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scrc.check(); err != nil {
				return nil, err
			}
			scrc.mutation = mutation
			if node, err = scrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(scrc.hooks) - 1; i >= 0; i-- {
			if scrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scrc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, scrc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SiteCrawlRule)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SiteCrawlRuleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (scrc *SiteCrawlRuleCreate) SaveX(ctx context.Context) *SiteCrawlRule {
	v, err := scrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrc *SiteCrawlRuleCreate) Exec(ctx context.Context) error {
	_, err := scrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrc *SiteCrawlRuleCreate) ExecX(ctx context.Context) {
	if err := scrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scrc *SiteCrawlRuleCreate) defaults() {
	if _, ok := scrc.mutation.CreatedAt(); !ok {
		v := sitecrawlrule.DefaultCreatedAt()
		scrc.mutation.SetCreatedAt(v)
	}
	if _, ok := scrc.mutation.UpdatedAt(); !ok {
		v := sitecrawlrule.DefaultUpdatedAt()
		scrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := scrc.mutation.HasDataToList(); !ok {
		v := sitecrawlrule.DefaultHasDataToList
		scrc.mutation.SetHasDataToList(v)
	}
	if _, ok := scrc.mutation.IsTimeHumanize(); !ok {
		v := sitecrawlrule.DefaultIsTimeHumanize
		scrc.mutation.SetIsTimeHumanize(v)
	}
	if _, ok := scrc.mutation.IsSpa(); !ok {
		v := sitecrawlrule.DefaultIsSpa
		scrc.mutation.SetIsSpa(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scrc *SiteCrawlRuleCreate) check() error {
	if _, ok := scrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SiteCrawlRule.created_at"`)}
	}
	if _, ok := scrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SiteCrawlRule.updated_at"`)}
	}
	if _, ok := scrc.mutation.ArticleSelector(); !ok {
		return &ValidationError{Name: "article_selector", err: errors.New(`ent: missing required field "SiteCrawlRule.article_selector"`)}
	}
	if _, ok := scrc.mutation.TitleSelector(); !ok {
		return &ValidationError{Name: "title_selector", err: errors.New(`ent: missing required field "SiteCrawlRule.title_selector"`)}
	}
	if _, ok := scrc.mutation.LinkSelector(); !ok {
		return &ValidationError{Name: "link_selector", err: errors.New(`ent: missing required field "SiteCrawlRule.link_selector"`)}
	}
	if _, ok := scrc.mutation.DescriptionSelector(); !ok {
		return &ValidationError{Name: "description_selector", err: errors.New(`ent: missing required field "SiteCrawlRule.description_selector"`)}
	}
	if _, ok := scrc.mutation.HasDataToList(); !ok {
		return &ValidationError{Name: "has_data_to_list", err: errors.New(`ent: missing required field "SiteCrawlRule.has_data_to_list"`)}
	}
	if _, ok := scrc.mutation.DateSelector(); !ok {
		return &ValidationError{Name: "date_selector", err: errors.New(`ent: missing required field "SiteCrawlRule.date_selector"`)}
	}
	if _, ok := scrc.mutation.DateLayout(); !ok {
		return &ValidationError{Name: "date_layout", err: errors.New(`ent: missing required field "SiteCrawlRule.date_layout"`)}
	}
	if _, ok := scrc.mutation.IsTimeHumanize(); !ok {
		return &ValidationError{Name: "is_time_humanize", err: errors.New(`ent: missing required field "SiteCrawlRule.is_time_humanize"`)}
	}
	if _, ok := scrc.mutation.IsSpa(); !ok {
		return &ValidationError{Name: "is_spa", err: errors.New(`ent: missing required field "SiteCrawlRule.is_spa"`)}
	}
	if _, ok := scrc.mutation.SiteID(); !ok {
		return &ValidationError{Name: "site", err: errors.New(`ent: missing required edge "SiteCrawlRule.site"`)}
	}
	return nil
}

func (scrc *SiteCrawlRuleCreate) sqlSave(ctx context.Context) (*SiteCrawlRule, error) {
	_node, _spec := scrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (scrc *SiteCrawlRuleCreate) createSpec() (*SiteCrawlRule, *sqlgraph.CreateSpec) {
	var (
		_node = &SiteCrawlRule{config: scrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sitecrawlrule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sitecrawlrule.FieldID,
			},
		}
	)
	if value, ok := scrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sitecrawlrule.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := scrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sitecrawlrule.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := scrc.mutation.ArticleSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldArticleSelector,
		})
		_node.ArticleSelector = value
	}
	if value, ok := scrc.mutation.TitleSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldTitleSelector,
		})
		_node.TitleSelector = value
	}
	if value, ok := scrc.mutation.LinkSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldLinkSelector,
		})
		_node.LinkSelector = value
	}
	if value, ok := scrc.mutation.DescriptionSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldDescriptionSelector,
		})
		_node.DescriptionSelector = value
	}
	if value, ok := scrc.mutation.HasDataToList(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sitecrawlrule.FieldHasDataToList,
		})
		_node.HasDataToList = value
	}
	if value, ok := scrc.mutation.DateSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldDateSelector,
		})
		_node.DateSelector = value
	}
	if value, ok := scrc.mutation.DateLayout(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sitecrawlrule.FieldDateLayout,
		})
		_node.DateLayout = value
	}
	if value, ok := scrc.mutation.IsTimeHumanize(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sitecrawlrule.FieldIsTimeHumanize,
		})
		_node.IsTimeHumanize = value
	}
	if value, ok := scrc.mutation.IsSpa(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sitecrawlrule.FieldIsSpa,
		})
		_node.IsSpa = value
	}
	if nodes := scrc.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sitecrawlrule.SiteTable,
			Columns: []string{sitecrawlrule.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: site.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.site_site_crawl_rule = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SiteCrawlRuleCreateBulk is the builder for creating many SiteCrawlRule entities in bulk.
type SiteCrawlRuleCreateBulk struct {
	config
	builders []*SiteCrawlRuleCreate
}

// Save creates the SiteCrawlRule entities in the database.
func (scrcb *SiteCrawlRuleCreateBulk) Save(ctx context.Context) ([]*SiteCrawlRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scrcb.builders))
	nodes := make([]*SiteCrawlRule, len(scrcb.builders))
	mutators := make([]Mutator, len(scrcb.builders))
	for i := range scrcb.builders {
		func(i int, root context.Context) {
			builder := scrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SiteCrawlRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scrcb *SiteCrawlRuleCreateBulk) SaveX(ctx context.Context) []*SiteCrawlRule {
	v, err := scrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrcb *SiteCrawlRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := scrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrcb *SiteCrawlRuleCreateBulk) ExecX(ctx context.Context) {
	if err := scrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
