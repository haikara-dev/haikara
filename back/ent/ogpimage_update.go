// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/haikara-dev/haikara/ent/article"
	"github.com/haikara-dev/haikara/ent/ogpimage"
	"github.com/haikara-dev/haikara/ent/predicate"
)

// OGPImageUpdate is the builder for updating OGPImage entities.
type OGPImageUpdate struct {
	config
	hooks    []Hook
	mutation *OGPImageMutation
}

// Where appends a list predicates to the OGPImageUpdate builder.
func (oiu *OGPImageUpdate) Where(ps ...predicate.OGPImage) *OGPImageUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetUpdatedAt sets the "updated_at" field.
func (oiu *OGPImageUpdate) SetUpdatedAt(t time.Time) *OGPImageUpdate {
	oiu.mutation.SetUpdatedAt(t)
	return oiu
}

// SetFileName sets the "file_name" field.
func (oiu *OGPImageUpdate) SetFileName(s string) *OGPImageUpdate {
	oiu.mutation.SetFileName(s)
	return oiu
}

// SetFilePath sets the "file_path" field.
func (oiu *OGPImageUpdate) SetFilePath(s string) *OGPImageUpdate {
	oiu.mutation.SetFilePath(s)
	return oiu
}

// SetOriginURL sets the "origin_url" field.
func (oiu *OGPImageUpdate) SetOriginURL(s string) *OGPImageUpdate {
	oiu.mutation.SetOriginURL(s)
	return oiu
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (oiu *OGPImageUpdate) SetArticleID(id int) *OGPImageUpdate {
	oiu.mutation.SetArticleID(id)
	return oiu
}

// SetArticle sets the "article" edge to the Article entity.
func (oiu *OGPImageUpdate) SetArticle(a *Article) *OGPImageUpdate {
	return oiu.SetArticleID(a.ID)
}

// Mutation returns the OGPImageMutation object of the builder.
func (oiu *OGPImageUpdate) Mutation() *OGPImageMutation {
	return oiu.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (oiu *OGPImageUpdate) ClearArticle() *OGPImageUpdate {
	oiu.mutation.ClearArticle()
	return oiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OGPImageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oiu.defaults()
	if len(oiu.hooks) == 0 {
		if err = oiu.check(); err != nil {
			return 0, err
		}
		affected, err = oiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OGPImageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oiu.check(); err != nil {
				return 0, err
			}
			oiu.mutation = mutation
			affected, err = oiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oiu.hooks) - 1; i >= 0; i-- {
			if oiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OGPImageUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OGPImageUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OGPImageUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiu *OGPImageUpdate) defaults() {
	if _, ok := oiu.mutation.UpdatedAt(); !ok {
		v := ogpimage.UpdateDefaultUpdatedAt()
		oiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiu *OGPImageUpdate) check() error {
	if _, ok := oiu.mutation.ArticleID(); oiu.mutation.ArticleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OGPImage.article"`)
	}
	return nil
}

func (oiu *OGPImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ogpimage.Table,
			Columns: ogpimage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ogpimage.FieldID,
			},
		},
	}
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ogpimage.FieldUpdatedAt,
		})
	}
	if value, ok := oiu.mutation.FileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ogpimage.FieldFileName,
		})
	}
	if value, ok := oiu.mutation.FilePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ogpimage.FieldFilePath,
		})
	}
	if value, ok := oiu.mutation.OriginURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ogpimage.FieldOriginURL,
		})
	}
	if oiu.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ogpimage.ArticleTable,
			Columns: []string{ogpimage.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: article.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ogpimage.ArticleTable,
			Columns: []string{ogpimage.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ogpimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OGPImageUpdateOne is the builder for updating a single OGPImage entity.
type OGPImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OGPImageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (oiuo *OGPImageUpdateOne) SetUpdatedAt(t time.Time) *OGPImageUpdateOne {
	oiuo.mutation.SetUpdatedAt(t)
	return oiuo
}

// SetFileName sets the "file_name" field.
func (oiuo *OGPImageUpdateOne) SetFileName(s string) *OGPImageUpdateOne {
	oiuo.mutation.SetFileName(s)
	return oiuo
}

// SetFilePath sets the "file_path" field.
func (oiuo *OGPImageUpdateOne) SetFilePath(s string) *OGPImageUpdateOne {
	oiuo.mutation.SetFilePath(s)
	return oiuo
}

// SetOriginURL sets the "origin_url" field.
func (oiuo *OGPImageUpdateOne) SetOriginURL(s string) *OGPImageUpdateOne {
	oiuo.mutation.SetOriginURL(s)
	return oiuo
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (oiuo *OGPImageUpdateOne) SetArticleID(id int) *OGPImageUpdateOne {
	oiuo.mutation.SetArticleID(id)
	return oiuo
}

// SetArticle sets the "article" edge to the Article entity.
func (oiuo *OGPImageUpdateOne) SetArticle(a *Article) *OGPImageUpdateOne {
	return oiuo.SetArticleID(a.ID)
}

// Mutation returns the OGPImageMutation object of the builder.
func (oiuo *OGPImageUpdateOne) Mutation() *OGPImageMutation {
	return oiuo.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (oiuo *OGPImageUpdateOne) ClearArticle() *OGPImageUpdateOne {
	oiuo.mutation.ClearArticle()
	return oiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OGPImageUpdateOne) Select(field string, fields ...string) *OGPImageUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OGPImage entity.
func (oiuo *OGPImageUpdateOne) Save(ctx context.Context) (*OGPImage, error) {
	var (
		err  error
		node *OGPImage
	)
	oiuo.defaults()
	if len(oiuo.hooks) == 0 {
		if err = oiuo.check(); err != nil {
			return nil, err
		}
		node, err = oiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OGPImageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oiuo.check(); err != nil {
				return nil, err
			}
			oiuo.mutation = mutation
			node, err = oiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oiuo.hooks) - 1; i >= 0; i-- {
			if oiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oiuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oiuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OGPImage)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OGPImageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OGPImageUpdateOne) SaveX(ctx context.Context) *OGPImage {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OGPImageUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OGPImageUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiuo *OGPImageUpdateOne) defaults() {
	if _, ok := oiuo.mutation.UpdatedAt(); !ok {
		v := ogpimage.UpdateDefaultUpdatedAt()
		oiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiuo *OGPImageUpdateOne) check() error {
	if _, ok := oiuo.mutation.ArticleID(); oiuo.mutation.ArticleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OGPImage.article"`)
	}
	return nil
}

func (oiuo *OGPImageUpdateOne) sqlSave(ctx context.Context) (_node *OGPImage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ogpimage.Table,
			Columns: ogpimage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ogpimage.FieldID,
			},
		},
	}
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OGPImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ogpimage.FieldID)
		for _, f := range fields {
			if !ogpimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ogpimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ogpimage.FieldUpdatedAt,
		})
	}
	if value, ok := oiuo.mutation.FileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ogpimage.FieldFileName,
		})
	}
	if value, ok := oiuo.mutation.FilePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ogpimage.FieldFilePath,
		})
	}
	if value, ok := oiuo.mutation.OriginURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ogpimage.FieldOriginURL,
		})
	}
	if oiuo.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ogpimage.ArticleTable,
			Columns: []string{ogpimage.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: article.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ogpimage.ArticleTable,
			Columns: []string{ogpimage.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OGPImage{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ogpimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
